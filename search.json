[{"title":"int值越界问题","url":"/2022/12/13/JAVA问题集合/","content":"\n```java\npublic class Test1 {\n        public static void main(String[] args) {\n            SimpleDateFormat dt = new SimpleDateFormat(\"yyyy-MM-hh\");\n            try {\n                Long start = dt.parse(\"1994-11-02\").getTime();\n                Long ends = dt.parse(\"2022-06-05\").getTime();\n                Long day = ends-start;\n                System.out.println(\"我已经活了\"+day/(60*24*60*1000)+\"天\");\n            /* 从数学上来说 A/(B*C) = A/B/C  发现错误的时候 还特意用数学的方式去看了 应该是一致的\n                后面单独打印60*24*60*1000  60*24*60*1000*365  发现了问题  应该是超出int值的范围\n                问题：超出int值域范围会怎么展示 通过以下结论\n                结论：会去掉多余的位，重新计算\n             */\n                System.out.println(\"错误的展示-----我已经活了\"+day/(60*24*60*1000*365)+\"岁\");\n                System.out.println(\"正确的展示-----我已经活了\"+day/(60*24*60*1000)/365+\"岁\");\n                System.out.println(\"int类型：60*24*60*1000*365转为二进制为\"+Integer.toBinaryString(60*24*60*1000*365));\n                System.out.println(\"int类型：60*24*60*1000*365转为二进制为\"+Integer.toBinaryString(60*24*60*1000*365).length());\n                Long b = 60*24*60*1000*365l;\n                System.out.println(\"b=\"+b);\n                System.out.println(\"Long类型：60*24*60*1000*365转为二进制为\"+Long.toBinaryString(b));\n                System.out.println(\"Long类型：60*24*60*1000*365转为二进制为\"+Long.toBinaryString(b).length());\n                System.out.println(\"把35位的二进制去掉前四个 从二进制转为10进制为：\"+Integer.parseInt(\"1010111101100010010110000000000\",2));\n                int a = Integer.MAX_VALUE-1;\n                System.out.println(\"int的最大值为：\"+a);\n                System.out.println(day/2147483647);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            //getIntValue();  当count+1 会一直加  加到最大值 然后因为Java内部机制变为-2的8次方-1 然后开始+1  因为是死循环  所以会一直循环下去\n        }\n\n        /**\n         * 有趣的实验 int值域相关\n         * 有个陷阱啊  就是加载到一定程度会重新开始\n         */\n        public static void getIntValue(){\n            int count = 0 ;\n            while (true) {\n                count++;\n                if(count<20) {\n                    System.out.println(\"此时的count值为：\"+count+\"hello world\");\n                }\n                // else {break;}  //不加这一句会一直循环下去\n            }\n        }\n\n\n\n}\n```\n\n\n\n"},{"title":"我的第一篇博客","url":"/2022/12/07/我的第一篇博客/"},{"title":"Hello World","url":"/2022/12/06/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]